# 1. Introduction to TypeScript  
- What is TypeScript?  
- History and Evolution of TypeScript  
- Why Use TypeScript?  
  - Benefits over JavaScript  
  - Type Safety & Static Typing  
  - Readability & Maintainability  
  - Improved Developer Experience  
- JavaScript vs TypeScript  
  - Key Differences  
  - Pros and Cons  

# course requirements or prerequisites?

# 2. Setting Up TypeScript  
- Installing TypeScript  
  - Using npm: `npm install -g typescript`  
  - Checking the installation: `tsc --version`  
- Setting up TypeScript Compiler  
  - Understanding `tsconfig.json`  
  - Compiler options (`target`, `module`, `strict`, etc.)  
  - Running TypeScript files: `tsc filename.ts`  
- Using TypeScript with Node.js  
  - Installing `ts-node`  
  - Running TypeScript directly  

#  How the TypeScript compiler works (and how you may configure it)

# 3. TypeScript Basics  
- Variables and Data Types  
  - `string`, `number`, `boolean`, `any`, `void`, `never`, `null`, `undefined`  
  - Type Inference  
  - Type Assertions (`as` keyword, `<Type>` syntax)  
- Functions in TypeScript  
  - Function Return Types  
  - Optional & Default Parameters  
  - Rest Parameters  
  - Function Overloading  
- Type Aliases and Interfaces  
  - Defining and Using Interfaces  
  - Difference Between Type Alias and Interface  
  - Extending Interfaces  

#  Decorators

# 4. Object-Oriented Programming in TypeScript  
- Classes and Objects  
  - Defining Classes  
  - Properties and Methods  
  - Public, Private, and Protected Access Modifiers  
  - Readonly Properties  
- Inheritance in TypeScript  
  - Extending Classes (`extends` keyword)  
  - Method Overriding  
  - Abstract Classes  
- Interfaces vs Abstract Classes  
- Static Properties and Methods  

# 5. Advanced TypeScript Features  
- Generics  
  - Generic Functions  
  - Generic Interfaces  
  - Generic Classes  
- Type Guards  
  - `typeof`, `instanceof`, and Custom Type Guards  
- Mapped Types  
- Conditional Types  
- Utility Types (`Partial`, `Required`, `Readonly`, `Pick`, `Omit`, etc.)  

# 6. Working with Modules and Namespaces  
- Import and Export in TypeScript  
  - Named and Default Exports  
  - Importing Modules  
- Namespaces in TypeScript  
- TypeScript with ES Modules  

----------------------------------
# 7. Error Handling and Debugging  
- Exception Handling (`try`, `catch`, `finally`)  
- Custom Errors in TypeScript  
- Debugging TypeScript Code  

# 8. TypeScript with Frontend Frameworks  
- TypeScript with React  
  - Setting up TypeScript in a React project  
  - Type Checking React Props and State  
- TypeScript with Angular  
  - TypeScriptâ€™s Role in Angular  
  - Strong Typing with Services and Components  
- TypeScript with Vue  
- How to set up a TypeScript project with webpack

# 9. TypeScript with Backend Development  
- Using TypeScript with Node.js  
- Setting Up Express with TypeScript  
- TypeScript with Databases (TypeORM, Prisma)  

# 10. Tooling and Best Practices  
- TypeScript Linters (`ESLint`, `TSLint`)  
- Prettier for Code Formatting  
- Writing Clean and Maintainable TypeScript Code  
- TypeScript Best Practices  


https://www.typescriptlang.org/docs/handbook/2/basic-types.html
https://www.tutorialsteacher.com/typescript/typescript-overview
https://www.typescripttutorial.net/